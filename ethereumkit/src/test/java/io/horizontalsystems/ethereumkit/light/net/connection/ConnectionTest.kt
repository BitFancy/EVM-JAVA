package io.horizontalsystems.ethereumkit.light.net.connection

import io.horizontalsystems.ethereumkit.core.hexStringToByteArray
import io.horizontalsystems.ethereumkit.light.crypto.CryptoUtils
import io.horizontalsystems.ethereumkit.light.crypto.ECKey
import io.horizontalsystems.ethereumkit.light.net.Node
import io.horizontalsystems.ethereumkit.light.net.PeerGroup
import io.horizontalsystems.ethereumkit.light.net.Ropsten
import io.horizontalsystems.ethereumkit.light.net.messages.IMessage
import io.horizontalsystems.ethereumkit.light.net.messages.les.ProofsMessage
import org.junit.Before
import org.junit.Test
import java.math.BigInteger

class ConnectionTest {

    @Before
    fun setUp() {
    }


    @Test
    fun run() {
        var disconnected = false

        val node = Node(id = "1baf02c18c08ab0d009ccc9b51168be6a8776509ff229a6ca08507b53579cb99e0df1709bd1bcf64aed348f9a31298842cf12c1764c8de9d28abb921a548ad8c".hexStringToByteArray(),
                host = "eth-testnet.horizontalsystems.xyz",
                port = 20303,
                discoveryPort = 30301)

        val connection = Connection(node, object : IPeerConnectionListener {
            override fun onConnectionEstablished() {
            }

            override fun connectionKey(): ECKey {
                return CryptoUtils.ecKeyFromPrivate(BigInteger("38208918395832628331087730025239389699013035341486183519748173810236817397977"))
            }

            override fun onDisconnected(error: Throwable?) {
                disconnected = true
            }

            override fun onMessageReceived(message: IMessage) {
            }
        })

//        val messagePackets = "f864b840636dbcba238de1077d89fa427f3ae59c166588d8422a1b05ea275b8ff4f9d00c86b59d656a11d9735d86538a5624b22731c026412327af7e8644c57a73f053cea084334c29edc3fe69cf73f3b35719b933e34fcf51dd6cf2916e86d9dbedd90d5b040000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000".hexStringToByteArray()
//        val authAckMessage = AuthAckMessage.decode(messagePackets)
//
//        println("authAckMesage: $authAckMessage")
        connection.connect()

        while (!disconnected) {
            println("running")
            Thread.sleep(1000)
        }

        println("disconnected")
    }


    @Test
    fun peerGroupTest() {
        val peerGroup = PeerGroup(Ropsten(), "0x")

        peerGroup.start()

        Thread.sleep(120 * 1000)

    }

    @Test
    fun trieNodeTest() {
        val payload = "f90d0c882d0eed20df20d3318411de1135f90cfbf90211a0331ba6b15a470e1c9a56c23b0f1f77f8805395bc64c5f7c87eb235dfb35d61b3a005fe6f3dbd44bbdc20817b4aed358bce485ec4fb83f36f87c3130b94bd0a017ca04b7b81d76c0d1672615e411fdf4a89871f3e7117af2328ec6ab29f5a611cbc9da00f7dea9686fdfd99fe3d42c3492f5c405704d7ba5b4a18797f668ff381a17a7ca0af75a967ae62e3b804944d095a6b6f5774525394f13ef54d3751d978e55ef4f3a0bfc2dd5377e0b52a435d53fd817018f24d05346e8f86248e6f8c99d2a9efc58ea034118844292d317093a72751d4f93f549666b9e4acdab97748d892f642a2a760a019e8d1ea3c001eae2550e4abbc16f525461005e95749f10430d7b117145d7a14a075c629cf3d99916cd97f2355b030c32f21a941bc1ff94bb107b195c5091e210ca03370e5aaa3300c9fc59fe85acc1df449c9779398b40c53a54349f79a57afdca0a09b65f42cb0a37d56961b4b117178b09aaf9fb929da199263788d4157eae77810a065579366abe0207c1162ca2a11dbd1a55508df958d535b27142964a8b4392e8da009e51825e46605a84c1585519b13eacb35e7eca2f68b9d6f7fa5ce15cf7aff5ea04659aaa5dfe4984612c8a72df532913d14609f534bb138675949de4f31df7f6aa0dac82d9907fe3768ecbd50b893c847fe44c19f3766e1c05d5be2926112f9c3d8a00bbb91eae67d9505b1ab5233e81e90587b7a7772ba446083e37cd925fa3d7b3180f90211a0b88f84a4aa51250c6220fb182cfc7a68ba20f03cbd65400eec75788420db0152a036cbaa7015869e4633a9c32afbf55b5d8f098a2ef5f45a17e6409ddaec9f0376a099be02088cc445d8ab14973c6ae0486fec103b2110aca27cb15f1445b5fbc549a09e45d98390ba5497572a3aa626a21ad8c001149bdc8a8ac18bce8596516f6baca094c0c204b2de6d8f2d81385277afc3c26708707ee6c1ceab8b875bc80ff5a8ada06de84c31303a9d22808f8628694a1c7bbad6cb184bf295a1bb7db22b8f1388eca071d8829959680aae5194d130154b73438ec69c7fe120c29985d752e753702fe2a004050daac117dd99e1ea0ce5d4103ee7d23810dddb19be98f7b35a523a2a394ea06479fc93a250ce11788bd30e63755b711487d7e77ce5cd0ae3611d3af93c1117a08c6caea65888ef2309e05ded4e0f266aa741707fd8ea07855ab46935e1dcbb7ea0ef41326ab916b61f487279741bc7f72b293f4576d51afbd6342e4dfaad57710aa0ba6214c2340d8a99622a5ededd43ec359d05657470b744ff86c49fa08ecae7e8a0fd963dac4f522583a42e3e76dc09fefedda2ce03c75f2dbba046f61faf850975a0005d4dcbf21a076a3f38b0d9326380f32ad9bbb20a5a49014df26f569598c1a8a067c173d06b046edd1cf8e3961568a915f442666f80ec4a88d64985a9c23ce219a02744973b8f7367f85e471c2435b81dfe40f96a5b03c0c8d5914c41b19af030e480f90211a003eb4493a1259259019c1204f07d4f29012828994bd9d8af731c5eabfed5f5ada0edc6b9c3702d660b73df039a1d53d7a3ae8f7219501f18a545e340e269e7c6faa0342de1102d205bb0464fa10f67d55b160e2fe246fcc7158eaf7fb5c458e16396a0a21ab62e7ace187d485fb2be539c026c1bd1ad164e9101f4d983515e22d8f689a07cd3fe9db0dd1d8f60b614909110398d27b6a3e8d0be0a4d69311097c045d2afa0a984be93d5fe11eabb3154a579065719247121ddaa8c22314a43c127c891def4a05c2be5bd627aec348e95ec927bfd53f6bee3b571126219c556b5a01b65d14cd3a02b9df70212aea4562cffbeaec5b20d024a8120b6d71776db4712eef4cbcbdfd6a0b38bb21849beb661e54053fe0ee90aad619c9e3d0b2548e8008c9a86037b8727a0cab742d851891085b4893649007260faa0736d42c51abc99487c57e5dd59a535a0450560666319e815658523889b21027e1c06999520a7be212aed02664f6c80f1a086b161e4fb0ed2dc5ad4bbc65b11c864032dce0e5d03d4ad6f259a890de550dea0c0dc39a8e681fb9a76ad8e67d0798f620201d782a7892a740c892544b9eda233a0f723c7a4892be1c431d3f3faf4818793530a9522e989a964fe114cefcff085d0a0896428f94f23690a42b03cda461d15117b989b791c61da733a7bb21370930407a08903f65a5df33c58f01f0ec8e5c28acec97004d3a70f44615ebb2ba9ecbd682380f90211a037599f5e90a66f295526d8050149921d5d7ecde1a49514357ab579f7cf009657a0d527f3804a13bd75cdae98951672d2d34ba9ba9c5471400a54bae2ae743eeed1a079752d4d898f42b77a6b2d889db061a789747877cf09d46fad58db7e324bb17fa06dfba8b80879386c6dfd8e7f74ecd202306981f83cc9a235aa9726e5a015e5f7a05d4abc1521a32bd246f5c572bd9926ac31d83252f58bb226d5b54b3db3ed6acea015ff073846ad1757c2e9ba147a8e22fc1561c1f2aa8dc833ce27c451f746ce16a04a2a0e468b85f36dd835486d712777b70c63045b82a74a6e76a834cb5c119072a0e9f547cb561d5e1cbb701e1de159614a82bbba722d0f932229456bc34990eb2aa026ae58c9f4c7c81c818f0dcdf9d6e2534b1d03f78257cce2cfbe1d9d3afc4ed8a0580a4d457f80bb7a99b239de2103ed427c649c7ccbee5c18f02cc815d0986880a081647a0aee6f71d6369533055dab21f9012c5c62a9f7ea4e07b6d9d1417b3ad1a0a416d6666c6be107005afc9080b035b5e352cce94222f0f985790b348c0e923da0d5df060aa46930ee985ba57e53ef5107df8950990258fd8b02cee50c3091e7f8a078150b68816d70af6886f4e1a72130257507eab9cf5a6b3f2b2bfa76fa0677d1a0dfaa3f622e5422bfe50835ae5a79468bbcafdb8ff75942399cdca632b272eb09a0f3e9289812301290ddb887c1836afb4d28ce95a788a5dd16aa7832142120d5f180f90211a0517fdaeb626480005c269180dc48aa731d2240dc5df0cedc53b1c9a8fb7f2493a05436dda9bd1bf6af5940c24fdf2b81f20771d96b306a9d060d62db0582f37975a0c565fc5355a75ba69829d9bed27090d0c4834dd2af8a44bb491c2bee73dcbad3a0a4bf0607f5fb6d6a7f0c868bd2fb42d76c2b6881312baafa311e5ddd8abb95efa0d3c590421818cd5cf988ca81b1befaf0820399ac1ecf21af175f6b19e0d5ca55a0aac03a0a2fe76de7528b5d731ca1f1efb1a65f8909b158af926e4cf0ba10453ea021f86df2d873cd5bbbabfbddf7db042d81329621aeb127f27c9b9369c13f05e3a00216a2e6c20ff432f26b5537fd7ea9053425431b7d06d609208e6bb552714f80a0ffb83424ff24e10932e25be1a71cf1ad8223f67664e775cac754d1f4514caa45a0cf619a789866187b641f59fd4c82330b21c589826bd5649b18a67922e10f4ddba0bef9d386be60fbdf0b8643b682652bd1b49b69a2e4c451e915fa666682a56253a030811b936d31422d366903413312b2e7eb40a58314cc3eb2fa44b2516568f83ba018d65095270362c84b986525dd58b42fc325033b647893f1b0a83cae838609a4a0dfa2a0cb265c8896d05877599527a2845035d4f68b7eb5dc67738543b1d7b265a0d5b89864022e98ba9678bf12d8c8dcf8fbf9bbc9a4982c4c79e62ce1dcdc6ca0a04a6ced2c3343acc38f33dd4dd886d200399db82d2542a38ce4109e92d1163c1680f901d1a011cc6953317ec304b5551a113ef671b50e580249dfb630d5bd314c89a0fb73b0a072b98b67559dfe3b876d53751164327fac0fbc289c2f9cd1bd1a62e955726cf5a028b6c1d1086b459b47f0f393d1a7124b12830dbfb00950f5c73e234eeb596996a04f0ba60f0cf9e2dd0227e7da124adf0bdd7a7e69cc63a20753c7e947918ca430a08ce9ffbb6c7efb9c7e3fbbd34de5e48b300742d0099e4e5dcfadf1287a06736ea01c17bad40cc94714956252c8f5a96a846a633628dfd6873f737bc19edad99a61a040b174895cf64393977c95e13c594814e86c66a6966d575f8486b28b4a5fbcc1a092ffc17a391e270d5b37a93b1bb26b366de52a0af1a35b31b850fc6d7a222764a09ebb6d37a2251ece98c75a8e9c6fdd5987181334b14d932f4b1c4d93e4537a0aa032bb5ad7e3dcf3871407a06d61007e5d2effdcbbb96793a64df069d7daf20a128080a0a9bc1c71ce256ce8dcff00b3fe0bd379130d2aa7dc08f0462835541db63a5f5ba07d8e6ad81b06d856d35dce953d6edd6499434c2fb5b1ae3ad62a4a5df1f55597a047cbe69a85a23c009b46a737c8c3cb811f5af9f8f59cd5b096c204d77212e42ea0d15542bbde5ece317a29e923830684685307ddb61916faadfbe2429e1aecf1ab80f85180a0f29c510467aa617f6847fa0e00518b48845ca242b9ca5302da03deb627878c798080808080808080808080a0e2a847186ee128d12b74b7b77aeb9a0db544a1a49bcf9fec57fe04de72c62ffc808080f86e9d30681f16030cb7d2c2140183acc0538a2464ae0f49159195c86100ffa2b84ef84c5988093a1054b58f57e8a056e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421a0c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470".hexStringToByteArray()

        val proofsMessage = ProofsMessage(payload)

        println("$proofsMessage")

        val stateRoot = "2be24d2b03ec1ca17e3299f1d2865e7f030d431e012e3dc116b563d62e9f2f45".hexStringToByteArray()
        val address = "f757461bdc25ee2b047d545a50768e52d530b750".hexStringToByteArray()
        //path 0681f16030cb7d2c2140183acc0538a2464ae0f49159195c86100ffa2


        proofsMessage.getValidatedState(stateRoot, address)

    }
}